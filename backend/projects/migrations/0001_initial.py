# Generated by Django 5.2.3 on 2025-07-02 23:08

import django.core.validators
import django.db.models.deletion
import projects.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Имя / название')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Введите корректный номер телефона в международном формате.', regex='^\\+?\\d{7,15}$')], verbose_name='Телефон')),
                ('tg_username', models.CharField(blank=True, max_length=100, verbose_name='Telegram')),
                ('contact_url', models.URLField(blank=True, verbose_name='Ссылка на контакт')),
                ('note', models.TextField(blank=True, verbose_name='Примечание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлен')),
                ('company', models.CharField(blank=True, max_length=255, verbose_name='Компания')),
            ],
            options={
                'verbose_name': 'Заказчик',
                'verbose_name_plural': 'Заказчики',
            },
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Имя / название')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Введите корректный номер телефона в международном формате.', regex='^\\+?\\d{7,15}$')], verbose_name='Телефон')),
                ('tg_username', models.CharField(blank=True, max_length=100, verbose_name='Telegram')),
                ('contact_url', models.URLField(blank=True, verbose_name='Ссылка на контакт')),
                ('note', models.TextField(blank=True, verbose_name='Примечание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлен')),
                ('github_username', models.CharField(blank=True, max_length=39, validators=[django.core.validators.RegexValidator(message='Некорректный GitHub-логин.', regex='^[A-Za-z0-9-]{1,39}$')], verbose_name='GitHub')),
                ('portfolio_url', models.URLField(blank=True, verbose_name='Портфолио')),
            ],
            options={
                'verbose_name': 'Исполнитель',
                'verbose_name_plural': 'Исполнители',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('color', models.CharField(default='#808080', max_length=7, validators=[django.core.validators.RegexValidator(message='Введите цвет в формате HEX, например “#FFAA00”.', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')], verbose_name='Цвет (HEX)')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Язык программирования',
                'verbose_name_plural': 'Языки программирования',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название статуса')),
                ('color', models.CharField(default='#808080', max_length=7, validators=[django.core.validators.RegexValidator(message='Введите цвет в формате HEX, например “#FFAA00”.', regex='^#(?:[0-9a-fA-F]{3}){1,2}$')], verbose_name='Цвет (HEX)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Статус проекта',
                'verbose_name_plural': 'Статусы проектов',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='Название проекта')),
                ('description', models.TextField(blank=True, verbose_name='Описание проекта')),
                ('image', models.ImageField(blank=True, null=True, upload_to='project_images/', verbose_name='Фото проекта')),
                ('archive', models.FileField(blank=True, null=True, upload_to=projects.models.project_archive_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['zip'])], verbose_name='Архив проекта (.zip)')),
                ('deadline_planned', models.DateTimeField(verbose_name='Указанный дедлайн')),
                ('deadline_actual', models.DateTimeField(blank=True, null=True, verbose_name='Фактический дедлайн')),
                ('planned_minutes', models.PositiveIntegerField(default=0, verbose_name='Запланировано (минут)')),
                ('spent_minutes', models.PositiveIntegerField(default=0, verbose_name='Затрачено (минут)')),
                ('cost', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='Стоимость')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('is_public', models.BooleanField(db_index=True, default=False, verbose_name='Публичный проект')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='projects.client', verbose_name='Заказчик')),
                ('developer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='projects.developer', verbose_name='Исполнитель')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.projectstatus', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lines_count', models.PositiveIntegerField(verbose_name='Количество строк')),
                ('percentage', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Процент кода')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.language', verbose_name='Язык / фреймворк')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='projects.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Анализ проекта',
                'verbose_name_plural': 'Анализ проектов',
                'ordering': ['-percentage'],
                'constraints': [models.UniqueConstraint(fields=('project', 'language'), name='unique_project_language'), models.CheckConstraint(condition=models.Q(('percentage__gte', 0), ('percentage__lte', 100)), name='percentage_0_100')],
            },
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['status'], name='projects_pr_status__932d20_idx'),
        ),
    ]
